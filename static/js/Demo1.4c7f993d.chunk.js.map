{"version":3,"sources":["features/Demo1/Demo1.js","features/Demo1/index.js"],"names":["Div","styled","div","compose","connect","state","props","useState","dimension","setDimension","dimensionOpts","setDimensionOpts","elements","setElements","elementsOpts","setElementsOpts","isMdxOpen","setIsMdxOpen","mdxCode","setMdxCode","getElements","dimensionName","mdxList","HomeResource","then","response","a","data","list","Elements","map","item","label","Name","value","UniqueName","handleMappingElement","catch","error","handleModalClick","status","length","handleMappingMdxCode","join","mdx","inputkey","val","outputkey","obj","R","opts","newElement","forEach","split","elementName","includes","push","useEffect","getDimensions","reduce","prev","curr","indexOf","className","name","hasSearchBar","placeholder","options","onChange","isMulti","disabled","onClick","isOpen","toggleClose","onSave","filter","Demo1"],"mappings":"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","file":"static/js/Demo1.4c7f993d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport * as R from 'ramda';\nimport { BsCodeSlash } from \"react-icons/bs\";\nimport { HomeResource } from '~~apis/resource';\nimport { Select } from '~~components/Fields';\nimport { Button } from '~~components/Buttons';\nimport { MdxModal } from '~~components/Modals';\n\nconst Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 5% 0%;\n  .wrapper{\n    display: flex;\n    align-items: center;\n    margin: 10px 0 0;\n  }\n  .clickOutsideBox {\n    &:not(:last-child){\n      margin: 0 10px 0 0\n    }\n    .selectWrapper{\n      min-width: 260px;\n      max-width: 600px;\n      min-height: 46px;\n    }\n  }\n`\n\nconst Demo1 = (props) => {\n  const [dimension, setDimension] = useState('')\n  const [dimensionOpts, setDimensionOpts] = useState([])\n  const [elements, setElements] = useState([])\n  const [elementsOpts, setElementsOpts] = useState([])\n  const [isMdxOpen, setIsMdxOpen] = useState(false)\n  const [mdxCode, setMdxCode] = useState('')\n\n  useEffect(() => {\n    getDimensions()\n  }, [])\n\n  function getDimensions() {\n    HomeResource.getDimensions()\n      .then(response => {\n        // console.log('getDimensions response -----', response);\n        const { data } = response\n        const list = data.value.reduce((prev, curr) => {\n          if (curr.Name.indexOf('}') === -1) {\n            return [\n              ...prev,\n              {\n                label: curr.Name,\n                value: curr.Name,\n                UniqueName: curr.UniqueName\n              }\n            ]\n          }\n          return prev\n        }, [])\n        setDimensionOpts(list)\n      })\n      .catch(error => {\n        // console.log('error -----', error.response);\n      });\n  }\n\n  function getElements(dimensionName, mdxList = null) {\n    HomeResource.getElements(dimensionName)\n      .then(async response => {\n        // console.log('getElements response -----', response);\n        const { data } = response\n        const list = data.Elements.map(item => ({\n          label: item.Name,\n          value: item.Name,\n          UniqueName: item.UniqueName\n        }))\n        setElementsOpts(list)\n        if (mdxList) {\n          handleMappingElement(list, mdxList)\n        }\n      })\n      .catch(error => {\n        // console.log('error -----', error.response);\n      });\n  }\n\n  function handleDimensionsChange(item) {\n    const dimensionName = item.dimension\n    setDimension(dimensionName)\n    setElements([])\n    getElements(dimensionName)\n  }\n\n  function handleElementsChange(item) {\n    setElements(item.elements)\n  }\n\n  function handleModalClick(status) {\n    setIsMdxOpen(status)\n\n    if (!status) return\n    if (elements.length > 0) {\n      const mdxList = elements.map(item => handleMappingMdxCode('value', item, elementsOpts, 'UniqueName'))\n      setMdxCode(mdxList.join(',\\n'))\n    } else {\n      const mdx = handleMappingMdxCode('value', dimension, dimensionOpts, 'UniqueName')\n      setMdxCode(mdx)\n    }\n  }\n\n  function handleMdxChange(val) {\n    setMdxCode(val)\n  }\n\n  function handleMappingMdxCode(inputkey, val, list, outputkey) {\n    const obj = R.find(R.propEq(inputkey, val))(list)\n    return obj ? obj[outputkey] : ''\n  }\n\n  function handleMdxModalSave() {\n    const mdxList = mdxCode.split(/[ ,/\\n]+/).filter(item=>!!item)\n    const dimensionName = handleMappingMdxCode('UniqueName', mdxList[0].split('.', 1)[0], dimensionOpts, 'value')\n    setDimension(dimensionName)\n    if (!dimensionName) {\n      setElements([])\n      return\n    }\n    getElements(dimensionName, mdxList)\n  }\n\n  function handleMappingElement(opts, mdxList) {\n    let newElement = []\n    mdxList.forEach(item => {\n      const hasElement = item.split('.').length === 3\n      if (!hasElement) return\n      const elementName = handleMappingMdxCode('UniqueName', item, opts, 'value')\n      if (newElement.includes(elementName) || !elementName) return\n      newElement.push(elementName)\n    })\n    setElements(newElement)\n  }\n\n  return (\n    <Div>\n      <div className='wrapper'>\n        <Select\n          name='dimension'\n          hasSearchBar\n          placeholder='Dimension'\n          value={dimension}\n          options={dimensionOpts}\n          onChange={handleDimensionsChange}\n        />\n        <Select\n          name='elements'\n          hasSearchBar\n          placeholder='Element'\n          isMulti\n          value={elements}\n          options={elementsOpts}\n          onChange={handleElementsChange}\n          disabled={!dimension}\n        />\n        <Button onClick={() => handleModalClick(true)}><BsCodeSlash /></Button>\n      </div>\n      <MdxModal\n        isOpen={isMdxOpen}\n        toggleClose={() => handleModalClick(false)}\n        mdxCode={mdxCode}\n        onChange={handleMdxChange}\n        onSave={handleMdxModalSave}\n      />\n    </Div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = {\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(Demo1);\n","import Demo1 from './Demo1';\n\nexport default Demo1;\n"],"sourceRoot":""}