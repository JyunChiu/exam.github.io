{"version":3,"sources":["redux/CommonActions.js","features/consts.js","redux/CommonReducer.js","reducers/index.js","middlewares/index.js","store/index.js","store/configureStore.js","features/App/App.js","features/App/index.js","routes/routes.js","index.js"],"names":["actionTypes","initialState","sideKey","adminInfo","memberInfo","handleActions","state","payload","key","rootReducer","history","combineReducers","router","connectRouter","common","reduxThunkMiddleware","createHistory","store","preloadedState","routerMiddleware","createRouterMiddleware","composeEnhancers","compose","enhancers","applyMiddleware","middlewares","createStore","reducers","configureStore","Div","styled","div","App","connect","props","children","Routes","exact","path","component","loadable","ReactDOM","render","document","querySelector"],"mappings":"sPAAaA,EACW,uBCDxB,ICIMC,EAAe,CACnBC,QDLgB,YCMhBC,UAAW,GACXC,WAAY,IAGCC,cAAc,eAE1BL,GAAmC,SAACM,EAAOC,GAC1C,IAAQC,EAAQD,EAARC,IACR,OAAO,2BACFF,GADL,IAEEJ,QAASM,OAIZP,GCVYQ,EALK,SAACC,GAAD,OAAaC,YAAgB,CAC/CC,OAAQC,YAAcH,GACtBI,YCLa,GACbC,qB,MAAAA,GCEK,I,EAAML,EAAUM,YAAc,IAGxBC,ECHE,SAAwBP,GAA+B,IAAtBQ,EAAqB,uDAAJ,GAEzDC,EAAmBC,YAAuBV,GAC5CW,EAAmBC,IAKjBC,EAAYF,EAAiBG,YAAgBC,EAAYV,qBAAsBI,IAC/EF,EAAQS,YACZC,EAASjB,GACTQ,EACAK,GAGF,OAAON,EDZYW,CAAelB,EAAS,I,uCEDvCmB,EAAMC,IAAOC,IAAV,oFCLMC,ED0BAV,YAAQW,aANC,SAAC3B,GAAD,MAAY,KAGT,IAGZgB,EAdH,SAACY,GACX,OACE,kBAACL,EAAD,KACGK,EAAMC,aEWEC,EAnBA,SAACF,GACd,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,OAAK,EACLC,KAAK,SACLC,UAAWC,aAAS,kBAAM,gEAE5B,kBAAC,IAAD,CACEH,OAAK,EACLC,KAAK,SACLC,UAAWC,aAAS,kBAAM,0ECR9BR,G,YAAM,kBACV,kBAAC,IAAD,CAAUf,MAAOA,GACf,kBAAC,IAAD,CAAiBP,QAASA,GACxB,kBAAC,IAAD,KACE,kBAAC,EAAD,WAMR+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.ef68e8bc.chunk.js","sourcesContent":["export const actionTypes = {\n  COMMON___SWITCH_SIDE: 'COMMON___SWITCH_SIDE',\n};\n\nexport function switchSide(key) {\n  return {\n    type: actionTypes.COMMON___SWITCH_SIDE,\n    key\n  };\n}\n","const SIDE_KEY = ['frontSide', 'backSide'];\n\nexport {\n  SIDE_KEY,\n};\n","import { handleActions } from 'redux-actions';\nimport { actionTypes } from './CommonActions';\nimport { SIDE_KEY } from '~~features/consts';\n\nconst initialState = {\n  sideKey: SIDE_KEY[0],\n  adminInfo: {},\n  memberInfo: {},\n};\n\nexport default handleActions({\n\n  [actionTypes.COMMON___SWITCH_SIDE]: (state, payload) => {\n    const { key } = payload;\n    return {\n      ...state,\n      sideKey: key\n    };\n  },\n\n}, initialState);\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport common from '~~redux/CommonReducer';\n\nconst rootReducer = (history) => combineReducers({\n  router: connectRouter(history),\n  common,\n});\n\nexport default rootReducer;\n","import reduxThunkMiddleware from 'redux-thunk';\n\nexport default {\n  reduxThunkMiddleware,\n};\n","import { createHashHistory as createHistory } from 'history';\n// import { createBrowserHistory as createHistory } from 'history';\nimport configureStore from './configureStore';\n\n// HashHistory\nexport const history = createHistory({});\n// BrowserHistory\n// export const history = createHistory();\nexport const store = configureStore(history, {});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router';\nimport reducers from '../reducers';\nimport middlewares from '../middlewares';\n\nexport default function configureStore(history, preloadedState = {}) {\n  // Build the middleware for intercepting and dispatching navigation actions\n  const routerMiddleware = createRouterMiddleware(history);\n  let composeEnhancers = compose;\n  if (process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n  }\n\n  const enhancers = composeEnhancers(applyMiddleware(middlewares.reduxThunkMiddleware, routerMiddleware));\n  const store = createStore(\n    reducers(history),\n    preloadedState,\n    enhancers\n  );\n\n  return store;\n}\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { useLocation } from 'react-router-dom';\nimport * as CommonActions from '~~redux/CommonActions';\n\nconst Div = styled.div`\n  >div{\n    width: 100%;\n    min-height: 100vh;\n  }\n`;\n\nconst App = (props) => {\n  return (\n    <Div>\n      {props.children}\n    </Div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = {\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(App);\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport loadable from '@loadable/component';\nimport App from '~~features/App';\n\n// 代替indexRoute的方式 http://stackoverflow.com/questions/42254929/how-to-nest-routes-in-react-router-v4\nconst Routes = (props) => {\n  return (\n    <App>\n      <Switch>\n        <Route\n          exact\n          path=\"/demo1\"\n          component={loadable(() => import(/* webpackChunkName: \"Demo1\" */ '../features/Demo1'))}\n        />\n        <Route\n          exact\n          path=\"/demo2\"\n          component={loadable(() => import(/* webpackChunkName: \"Demo2\" */ '../features/Demo2'))}\n        />\n      </Switch>\n    </App>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n  // BrowserRouter as Router\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { store, history } from './store';\nimport Routes from './routes/routes';\nimport './styles/main.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Router>\n        <Routes />\n      </Router>\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}